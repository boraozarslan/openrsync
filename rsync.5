.\"	$OpenBSD$
.\"
.\" Copyright (c) 2019 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate$
.Dt RSYNC 5
.Os
.Sh NAME
.Nm rsync
.Nd rsync wire protocol
.Sh DESCRIPTION
The
.Nm
protocol described in this relates to the BSD-licensed
.Xr openrsync 1 ,
a re-implementation of the GPL-licensed reference utility
.Xr rsync 1 .
It is compatible with version 27 of the reference.
.Pp
In this document, the
.Qq client process
refers to the utility as run on the operator's local computer.
The
.Qq server process
is run either on the local or remote computer, depending upon the
command-line given file locations.
.Ss Data types
The binary protocol encodes all data in little-endian format.
Integers are signed 32-bit, shorts are signed 16-bit, bytes are unsigned
8-bit.
A long is variable-length.
For values less than the maximum integer, the value is transmitted and
read as a 32-bit integer.
For values greater, the value is transmitted first as a maximum integer,
then a 64-bit signed integer.
.Pp
There are two types of checksums: long and short (slow and fast).
The fast checksum is a derivative of Adler-32.
The slow checksum is MD4.
For long checksums, the sum is made over the checksum seed first
(serialised in little-endian format), then the data.
.Ss Multiplexing
Most
.Nm
transmissions are wrapped in a multiplexing envelope protocol.
It is composed as follows:
.Pp
.Bl -enum -compact
.It
envelope header (4 bytes)
.It
envelope payload (arbitrary length)
.El
.Pp
The first byte of the envelope header consists of a tag.
If the tag is 7, the payload is normal data.
Otherwise, the payload is out-of-band data, such as server messages.
This may be discarded, but is usually shown to the operator.
.Pp
The only data not using this envelope are the initial handshake between
client and server.
.Ss Client process
The client can operate in sender or receiver mode depending upon the
command-line source and destination.
.Pp
If the destination directory (sink) is remote, the client is in sender
mode: the client will push its data to the server.
If the source file is remote, it is in receiver mode: the server pushes
to the client.
If neither are remote, the client operates in sender mode.
These are all mutually exclusive.
.Pp
When the client starts, regardless its mode, it first handshakes the
server.
This exchange is
.Em not
multiplexed.
.Pp
.Bl -enum -compact
.It
send local version (integer)
.It
receive remote version (integer)
.It
receive random seed (integer)
.El
.Pp
Following this, the client multiplexes when reading from the server.
(Transmissions sent from client to server are not multiplexed.)
If the client is in sender mode, it then sends data on each file to be
synchronised as follows.
.Pp
.Bl -enum -compact
.It
status byte (integer)
.It
inherited filename length (optional, byte)
.It
filename length (integer or byte)
.It
file (byte array)
.It
file length (long)
.It
file modification time (optional, time_t, integer)
.It
file mode (optional, mode_t, integer)
.El
.Pp
The status byte may consist of the following bits and determines which
of the optional fields are transmitted.
.Pp
.Bl -tag -compact -width Ds
.It 0x2
Do not send the file mode: it is a repeat of the last file's mode.
.It 0x20
Inherit some of the prior file name.
Enables the inherited filename length transmission.
.It 0x40
Use full integer length for file name.
Otherwise, use only the byte length.
.It 0x80
Do not send the file modification time: it is a repeat of the last
file's.
.El
.Pp
Following that, it then receives data from the server regarding the
server's copy of the same files at the destination.
Each of these requests starts as follows:
.Pp
.Bl -enum -compact
.It
file index or -1 to signal a change of phase (integer)
.El
.Pp
The phase defines the long checksum size as described in the following
setion.
The phase starts in phase 1, then proceeds to phase 2, and phase 3
signals an end of transmission.
If a phase change occurs, the sender must write back the -1 constant
integer value then re-start the request.
.Pp
If this is a dry-run scenario, the sender may then write back the index
(integer) to skip the block exchange.
.Pp
Otherwise, a block exchange occurs:
.Pp
.Bl -enum -compact
.It
number of blocks (integer)
.It
block length in the file (integer)
.It
terminal (remainder) block length (integer)
.El
.Pp
And for each block:
.Pp
.Bl -enum -compact
.It
short checksum (integer)
.It
long checksum (2 byte in phase 1, 16 byte in phase 2)
.El
.Pp
After the last block, the client must respond with a block
acknowledgement:
.Pp
.Bl -enum -compact
.It
file index (integer)
.It
number of blocks (integer)
.It
block length (integer)
.It
remainder block length (integer)
.El
.Pp
The client then compares the two files, block by block, and updates the
server with mismatches.
This sequence is as follows.
.Pp
.Bl -enum -compact
.It
data chunk size (integer)
.It
data chunk (bytes)
.It
block index subsequent to chunk or zero for finished (integer)
.El
.Pp
Following this sequence, the sender sends an epilogue for each host it
services.
.Pp
.Bl -enum -compact
.It
whole-file long checksum (16 bytes)
.El
.Pp
If in receiver mode, the inverse (write instead of read, read instead of
write) is performed.
The only difference is that the list of files (starting with the status
byte) is preceded by another value whose purpose is unknown:
.Pp
.Bl -enum -compact
.It
zero value (integer)
.It
status byte (integer)
.It
filename length (integer)...
.El
.Pp
Also, after the terminal phase change, the receiver reads the following
statistics:
.Pp
.Bl -enum -compact
.It
total bytes read (integer)
.It
total bytes written (integer)
.It
total size of files (integer)
.El
.Ss Server process
The server can operate in sender or receiver mode depending upon how the
client starts the server.
This may be directly from the parent process (when invoked for local
files) or indirectly via a remote shell.
.Pp
When in sender mode, the server pushes data to the client.
(This is equivalent to receiver mode for the client.)
In receiver, the opposite is true.
.Pp
When the server starts, regardless the mode, it first handshakes the
client.
This exchange is
.Em not
multiplexed.
.Pp
.Bl -enum -compact
.It
send local version (integer)
.It
receive remote version (integer)
.It
send random seed (integer)
.El
.Pp
Following this, the server multiplexes when writing to the client.
(Transmissions received from the client are not multiplexed.)
It then either sends the file list (in sender mode) or receives it in
receiver mode.
This is described in the
.Sx Client process
section.
.Pp
There are several notable differences to the sender or receiver process
when running in server mode.
.Pp
.Bl -enum -compact
.It
prior to the sender reading the file index (or phase change), the sender
in server mode must read an integer that must be zero
.It
prior to receiving the file list, the receiver in server mode does not
send the constant zero integer
.It
the sender sends post-transfer statistics when in server mode
.It
the receiver does not receive statistics when in server mode
.It
when in server mode
.Em and
when communicating to a client with a newer protocol (>27), the phase
change integer (-1) must be sent twice
.El
.Pp
The last note is probably a bug in the reference implementation.
.\" The following requests should be uncommented and used where appropriate.
.\" .Sh CONTEXT
.\" For section 9 functions only.
.\" .Sh RETURN VALUES
.\" For sections 2, 3, and 9 function return values only.
.\" .Sh ENVIRONMENT
.\" For sections 1, 6, 7, and 8 only.
.\" .Sh FILES
.\" .Sh EXIT STATUS
.\" For sections 1, 6, and 8 only.
.\" .Sh EXAMPLES
.\" .Sh DIAGNOSTICS
.\" For sections 1, 4, 6, 7, 8, and 9 printf/stderr messages only.
.\" .Sh ERRORS
.\" For sections 2, 3, 4, and 9 errno settings only.
.Sh SEE ALSO
.Xr openrsync 1 ,
.Xr rsync 1 ,
.Xr rsyncd 5
.\" .Sh STANDARDS
.\" .Sh HISTORY
.\" .Sh AUTHORS
.\" .Sh CAVEATS
.Sh BUGS
Time values are sent as 32-bit integers.
